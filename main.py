import sys
import os
import configparser
import re
import base64
from datetime import datetime
import matplotlib
matplotlib.use('Agg')  # 避免字体警告
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import numpy as np
from matplotlib.ticker import MultipleLocator
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QLabel, QLineEdit, QComboBox, QPushButton, QTextEdit, QListWidget, QStackedWidget,
    QFrame, QGroupBox, QMessageBox, QInputDialog, QDialog, QScrollArea,
    QSizePolicy, QFileDialog, QListWidgetItem, QAbstractItemView, QDateEdit, QCheckBox
)
from PyQt5.QtCore import Qt, QDate, QEvent, QUrl
from PyQt5.QtGui import QFont, QIcon, QPixmap, QColor, QImage, QPainter, QDesktopServices

# ================== 关键修改：确保正确获取可执行文件目录 ==================
if getattr(sys, 'frozen', False):  # 打包后运行
    BASE_DIR = os.path.dirname(os.path.abspath(sys.executable))
else:  # 脚本模式运行
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
# ====================================================================

# 设置matplotlib使用中文字体
plt.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体
plt.rcParams['axes.unicode_minus'] = False    # 解决负号显示问题

# 图片Base64编码占位符
SL_IMAGE_BASE64 = ""
ALSA_IMAGE_BASE64 = ""
APP_ICON_BASE64 = ""

def create_directories():
    # 使用绝对路径创建目录结构
    required_dirs = [
        os.path.join(BASE_DIR, "config"),
        os.path.join(BASE_DIR, "config", "course_grades"),
        os.path.join(BASE_DIR, "report"),
        os.path.join(BASE_DIR, "report", "by_course"),
        os.path.join(BASE_DIR, "report", "by_student"),
        os.path.join(BASE_DIR, "report", "by_trend"),
        os.path.join(BASE_DIR, "logs")
    ]
    
    for directory in required_dirs:
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)  # 确保目录创建
    
    # 创建默认配置文件
    config_path = os.path.join(BASE_DIR, "config", "settings.ini")
    if not os.path.exists(config_path):
        config = configparser.ConfigParser()
        config['DEFAULT'] = {
            'full_score': '100',
            'courses': '语文,数学,英语'
        }
        with open(config_path, 'w', encoding='utf-8') as configfile:
            config.write(configfile)

# 日志记录函数
def log_message(message, level="info", log_text=None, save_log=False):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] [{level.upper()}] {message}"
    
    # 在日志区域显示
    if log_text is not None:
        # 根据级别设置颜色
        if level.lower() == "error":
            color = "#ff0000"  # 红色
        elif level.lower() == "warning":
            color = "#ff9900"  # 橙色
        elif level.lower() == "success":
            color = "#009900"  # 绿色
        else:  # info
            color = "#0000ff"  # 蓝色
            
        # 添加带颜色的HTML格式
        html = f'<span style="color:{color};">{log_entry}</span>'
        log_text.append(html)
        log_text.verticalScrollBar().setValue(log_text.verticalScrollBar().maximum())
    
    # 如果勾选了保存日志，则写入文件
    if save_log:
        log_date = datetime.now().strftime("%Y-%m-%d")
        log_filename = os.path.join(BASE_DIR, "logs", f"{log_date}.log")
        with open(log_filename, 'a', encoding='utf-8') as logfile:
            logfile.write(log_entry + "\n")

# 清空日志文件
def clear_log_files():
    log_dir = os.path.join(BASE_DIR, "logs")
    if os.path.exists(log_dir):
        for filename in os.listdir(log_dir):
            if filename.endswith(".log"):
                file_path = os.path.join(log_dir, filename)
                try:
                    os.remove(file_path)
                except Exception as e:
                    print(f"删除日志文件错误: {str(e)}")
        return True
    return False

# 读取配置
def read_config():
    config = configparser.ConfigParser()
    config_path = os.path.join(BASE_DIR, "config", "settings.ini")
    
    if not os.path.exists(config_path):
        create_directories()
    
    config.read(config_path, encoding='utf-8')
    
    # 获取课程列表
    courses = config.get('DEFAULT', 'courses', fallback='语文,数学,英语')
    course_list = [c.strip() for c in courses.split(',') if c.strip()]
    
    # 获取满分值
    full_score = config.getint('DEFAULT', 'full_score', fallback=100)
    
    return course_list, full_score

# 保存配置
def save_config(courses, full_score):
    config = configparser.ConfigParser()
    config['DEFAULT'] = {
        'full_score': str(full_score),
        'courses': ','.join(courses)
    }
    
    config_path = os.path.join(BASE_DIR, "config", "settings.ini")
    with open(config_path, 'w', encoding='utf-8') as configfile:
        config.write(configfile)

# 获取所有课程
def get_all_courses():
    course_list, _ = read_config()
    return course_list

# 获取所有学生
def get_all_students():
    students = set()
    course_grades_dir = os.path.join(BASE_DIR, "config", "course_grades")
    
    if not os.path.exists(course_grades_dir):
        return []
    
    for filename in os.listdir(course_grades_dir):
        if filename.endswith(".txt"):
            file_path = os.path.join(course_grades_dir, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    for line in file:
                        if line.startswith("#") or not line.strip():
                            continue
                        parts = line.strip().split(',')
                        if len(parts) >= 2:
                            students.add(parts[0].strip())
            except Exception as e:
                log_message(f"读取学生文件错误: {filename} - {str(e)}", "error", None, False)
    
    return sorted(students)

# 添加成绩记录
def add_grade_record(course, student, score, full_score, date, remarks=""):
    # 检查同一天同一课程同一学生是否已有记录
    if check_duplicate_record(course, student, date):
        return False
    
    # 写入文件
    course_file = os.path.join(BASE_DIR, "config", "course_grades", f"{course}.txt")
    
    try:
        # 如果文件不存在，先写入标题行
        if not os.path.exists(course_file):
            with open(course_file, 'w', encoding='utf-8') as file:
                file.write("#学生,成绩,满分,日期,备注\n")
        
        # 创建记录行
        record = f"{student},{score},{full_score},{date},{remarks}\n"
        
        with open(course_file, 'a', encoding='utf-8') as file:
            file.write(record)
        return True
    except Exception as e:
        log_message(f"添加成绩错误: {str(e)}", "error", None, False)
        return False

# 检查重复记录
def check_duplicate_record(course, student, date):
    course_file = os.path.join(BASE_DIR, "config", "course_grades", f"{course}.txt")
    
    if not os.path.exists(course_file):
        return False
    
    try:
        with open(course_file, 'r', encoding='utf-8') as file:
            for line in file:
                if line.startswith("#") or not line.strip():
                    continue
                parts = line.strip().split(',')
                if len(parts) < 4:
                    continue
                
                if parts[0].strip() == student and parts[3].strip() == date:
                    return True
    except:
        pass
    
    return False

# 获取课程成绩数据
def get_course_grades(course):
    course_file = os.path.join(BASE_DIR, "config", "course_grades", f"{course}.txt")
    data = []
    
    if not os.path.exists(course_file):
        return data
    
    try:
        with open(course_file, 'r', encoding='utf-8') as file:
            for line in file:
                if line.startswith("#") or not line.strip():
                    continue
                parts = line.strip().split(',')
                if len(parts) < 4:
                    continue
                
                # 学生,成绩,满分,日期,备注
                student = parts[0].strip()
                try:
                    score = float(parts[1].strip())
                except:
                    score = 0
                try:
                    full = float(parts[2].strip())
                except:
                    full = 100
                date = parts[3].strip()
                remarks = parts[4].strip() if len(parts) > 4 else ""
                
                data.append({
                    'student': student,
                    'score': score,
                    'full_score': full,
                    'date': date,
                    'remarks': remarks
                })
    except Exception as e:
        log_message(f"读取课程成绩错误: {course} - {str(e)}", "error", None, False)
    
    return data

# 获取学生所有课程成绩
def get_student_grades(student):
    course_list = get_all_courses()
    data = []
    
    for course in course_list:
        course_data = get_course_grades(course)
        for record in course_data:
            if record['student'] == student:
                # 添加课程信息
                record['course'] = course
                data.append(record)
    
    return data

# 获取指定日期的成绩
def get_grades_by_date(target_date):
    course_list = get_all_courses()
    data = []
    
    for course in course_list:
        course_data = get_course_grades(course)
        for record in course_data:
            if record['date'] == target_date:
                # 添加课程信息
                record['course'] = course
                data.append(record)
    
    return data

# 获取课程所有学生最近一次成绩
def get_course_latest_grades(course):
    data = get_course_grades(course)
    if not data:
        return []
    
    # 按学生分组
    student_groups = {}
    for record in data:
        student = record['student']
        if student not in student_groups:
            student_groups[student] = []
        student_groups[student].append(record)
    
    # 获取每个学生的最近一次成绩
    latest_records = []
    for student, records in student_groups.items():
        # 按日期排序，获取最近一次
        records.sort(key=lambda x: datetime.strptime(x['date'], "%Y-%m-%d"), reverse=True)
        latest_records.append(records[0])
    
    return latest_records

# 删除成绩记录
def delete_grade_record(course, student, date):
    course_file = os.path.join(BASE_DIR, "config", "course_grades", f"{course}.txt")
    
    if not os.path.exists(course_file):
        return False
    
    try:
        # 读取所有行
        with open(course_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()
        
        # 过滤要删除的行
        new_lines = []
        deleted = False
        
        for line in lines:
            if line.startswith("#") or not line.strip():
                new_lines.append(line)
                continue
            
            parts = line.strip().split(',')
            if len(parts) < 4:
                new_lines.append(line)
                continue
            
            line_student = parts[0].strip()
            line_date = parts[3].strip()
            
            if line_student == student and line_date == date:
                deleted = True
                continue
            
            new_lines.append(line)
        
        # 如果删除了记录，则重新写入文件
        if deleted:
            with open(course_file, 'w', encoding='utf-8') as file:
                file.writelines(new_lines)
            return True
    
    except Exception as e:
        log_message(f"删除记录错误: {str(e)}", "error", None, False)
    
    return False


class InputPage(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.main_window = parent
        self.last_course = ""
        self.initUI()
        
    def initUI(self):
        layout = QVBoxLayout()
        layout.setSpacing(10)
        layout.setContentsMargins(15, 10, 15, 10)
        
        # 表单布局
        form_layout = QGridLayout()
        form_layout.setSpacing(12)
        form_layout.setColumnStretch(1, 1)
        
        # 课程选择
        self.course_label = QLabel("课程:")
        self.course_combo = QComboBox()
        form_layout.addWidget(self.course_label, 0, 0, Qt.AlignRight)
        form_layout.addWidget(self.course_combo, 0, 1)
        
        # 满分值
        self.full_score_label = QLabel("满分:")
        _, self.full_score = read_config()
        self.full_score_entry = QLineEdit(str(self.full_score))
        self.full_score_entry.setReadOnly(True)
        form_layout.addWidget(self.full_score_label, 1, 0, Qt.AlignRight)
        form_layout.addWidget(self.full_score_entry, 1, 1)
        
        # 学生姓名
        self.name_label = QLabel("姓名:")
        self.name_entry = QLineEdit()
        self.name_entry.setMaxLength(20)  # 不超过20个字符
        form_layout.addWidget(self.name_label, 2, 0, Qt.AlignRight)
        form_layout.addWidget(self.name_entry, 2, 1)
        
        # 成绩
        self.score_label = QLabel("成绩:")
        self.score_entry = QLineEdit()
        form_layout.addWidget(self.score_label, 3, 0, Qt.AlignRight)
        form_layout.addWidget(self.score_entry, 3, 1)
        
        # 日期
        self.date_label = QLabel("日期:")
        self.date_entry = QDateEdit()
        self.date_entry.setCalendarPopup(True)
        self.date_entry.setDate(QDate.currentDate())
        self.date_entry.setDisplayFormat("yyyy-MM-dd")
        form_layout.addWidget(self.date_label, 4, 0, Qt.AlignRight)
        form_layout.addWidget(self.date_entry, 4, 1)
        
        # 备注
        self.remarks_label = QLabel("备注:")
        self.remarks_entry = QLineEdit()
        self.remarks_entry.setPlaceholderText("不超过10个汉字")
        self.remarks_entry.setMaxLength(10)
        form_layout.addWidget(self.remarks_label, 5, 0, Qt.AlignRight)
        form_layout.addWidget(self.remarks_entry, 5, 1)
        
        layout.addLayout(form_layout)
        
        # 按钮区域
        button_layout = QHBoxLayout()
        button_layout.setSpacing(15)
        
        self.submit_btn = QPushButton("提交成绩")
        self.submit_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50; 
                color: white; 
                font-weight: bold;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.submit_btn.clicked.connect(self.submit_grade)
        
        self.delete_btn = QPushButton("删除记录")
        self.delete_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336; 
                color: white; 
                font-weight: bold;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        self.delete_btn.clicked.connect(self.show_delete_dialog)
        
        # 新增：打开成绩目录按钮
        self.open_grades_dir_btn = QPushButton("打开目录")
        self.open_grades_dir_btn.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6; 
                color: white; 
                font-weight: bold;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
        """)
        self.open_grades_dir_btn.clicked.connect(self.open_grades_dir)
        
        self.clear_btn = QPushButton("重置表单")
        self.clear_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3; 
                color: white; 
                font-weight: bold;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        self.clear_btn.clicked.connect(self.clear_form)
        
        button_layout.addStretch(1)
        button_layout.addWidget(self.submit_btn)
        button_layout.addWidget(self.delete_btn)
        button_layout.addWidget(self.open_grades_dir_btn)  # 新增按钮
        button_layout.addWidget(self.clear_btn)
        button_layout.addStretch(1)
        
        layout.addLayout(button_layout)
        
        # 状态提示
        self.status_label = QLabel("")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #666; font-style: italic; font-size: 10pt;")
        layout.addWidget(self.status_label)
        
        self.setLayout(layout)
        
        # 刷新课程列表
        self.refresh_courses()
        
        # 设置焦点
        self.name_entry.setFocus()
        
        # 连接回车键 - 修改回车键行为
        self.name_entry.returnPressed.connect(lambda: self.score_entry.setFocus())
        self.score_entry.returnPressed.connect(self.submit_grade)  # 成绩输入后直接提交
        self.remarks_entry.returnPressed.connect(self.submit_grade)  # 备注输入后提交
        
        # 为日期输入框安装事件过滤器以处理回车键
        self.date_entry.installEventFilter(self)
    
    def eventFilter(self, obj, event):
        """处理日期输入框的回车事件"""
        if obj == self.date_entry and event.type() == QEvent.KeyPress:
            if event.key() == Qt.Key_Return or event.key() == Qt.Key_Enter:
                self.submit_grade()
                return True
        return super().eventFilter(obj, event)
    
    def refresh_courses(self):
        courses = get_all_courses()
        self.course_combo.clear()
        self.course_combo.addItems(courses)
        
        # 恢复上一次选择的课程
        if self.last_course and self.last_course in courses:
            index = self.course_combo.findText(self.last_course)
            if index >= 0:
                self.course_combo.setCurrentIndex(index)
        elif courses:
            self.course_combo.setCurrentIndex(0)
    
    def update_full_score(self, full_score):
        """更新满分值显示"""
        self.full_score = full_score
        self.full_score_entry.setText(str(full_score))
    
    def open_grades_dir(self):
        """打开成绩文件目录"""
        grades_dir = os.path.join(BASE_DIR, "config", "course_grades")
        
        # 确保目录存在
        if not os.path.exists(grades_dir):
            os.makedirs(grades_dir, exist_ok=True)
        
        # 打开目录
        QDesktopServices.openUrl(QUrl.fromLocalFile(grades_dir))
        
        log_message(f"已打开成绩文件目录: {grades_dir}", "info", 
                   self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def submit_grade(self):
        # 检查配置页的满分值是否已生效
        if self.main_window.config_page.save_score_btn.isEnabled():
            log_message("请先在系统配置页保存满分值修改", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            return
        
        # 获取输入值
        course = self.course_combo.currentText()
        student = self.name_entry.text().strip()
        score_str = self.score_entry.text().strip()
        date = self.date_entry.date().toString("yyyy-MM-dd")
        remarks = self.remarks_entry.text().strip()
        
        # 验证输入
        if not student:
            log_message("姓名不能为空", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            self.name_entry.setFocus()
            return
        
        # 验证姓名：中英文，1-20个字符
        if not re.match(r'^[\u4e00-\u9fa5a-zA-Z ]{1,20}$', student):
            log_message("姓名必须是中文或英文，且不超过20个字符", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            self.name_entry.setFocus()
            return
        
        if not score_str:
            log_message("成绩不能为空", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            self.score_entry.setFocus()
            return
        
        # 验证成绩格式：最多一位小数
        if '.' in score_str:
            parts = score_str.split('.')
            if len(parts) != 2 or not parts[0].isdigit() or not parts[1].isdigit() or len(parts[1]) > 1:
                log_message("成绩格式错误，最多允许小数点后一位", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
                self.score_entry.setFocus()
                return
        else:
            # 没有小数点，但需要是整数
            if not score_str.isdigit():
                log_message("成绩必须是数字", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
                self.score_entry.setFocus()
                return

        try:
            score = float(score_str)
        except ValueError:
            log_message("成绩必须是数字", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            self.score_entry.setFocus()
            return
        
        # 获取满分值
        if self.full_score is None:
            _, self.full_score = read_config()
        
        if score < 0 or score > self.full_score:
            log_message(f"成绩必须在0到{self.full_score}之间", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            self.score_entry.setFocus()
            return
        
        # 检查是否已有相同记录
        if check_duplicate_record(course, student, date):
            reply = QMessageBox.question(self, "重复记录", 
                                        f"{student}在{date}已有{course}成绩记录，是否覆盖？",
                                        QMessageBox.Yes | QMessageBox.No)
            if reply == QMessageBox.Yes:
                # 删除旧记录
                delete_grade_record(course, student, date)
            else:
                log_message("成绩录入已取消", "info", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
                return
        
        # 添加记录
        if add_grade_record(course, student, score, self.full_score, date, remarks):
            # 清空输入框
            self.name_entry.clear()
            self.score_entry.clear()
            self.remarks_entry.clear()
            
            # 保存当前选择的课程
            self.last_course = course
            
            # 设置焦点
            self.name_entry.setFocus()
            
            log_message(f"成绩添加成功: {student}的{course}成绩{score}/{self.full_score}", "success", 
                       self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def clear_form(self):
        self.name_entry.clear()
        self.score_entry.clear()
        self.remarks_entry.clear()
        self.date_entry.setDate(QDate.currentDate())
        self.name_entry.setFocus()
        log_message("表单已重置", "info", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def show_delete_dialog(self):
        dialog = DeleteDialog(self.main_window)
        dialog.exec_()


class AnalysisPage(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.main_window = parent
        self.current_canvas = None  # 用于存储当前图表
        self.chart_data = None  # 存储图表数据
        self.initUI()
        
    def initUI(self):
        layout = QVBoxLayout()
        layout.setSpacing(10)
        layout.setContentsMargins(15, 10, 15, 10)
        
        # 分析条件区域
        condition_group = QGroupBox("筛选分析条件")
        condition_layout = QGridLayout()
        condition_layout.setSpacing(10)
        condition_layout.setColumnStretch(1, 1)  # 增加第二列的拉伸因子
        
        # 课程选择
        self.course_label = QLabel("课程:")
        self.course_combo = QComboBox()
        condition_layout.addWidget(self.course_label, 0, 0)
        condition_layout.addWidget(self.course_combo, 0, 1)
        
        # 学生选择
        self.student_label = QLabel("姓名:")
        self.student_combo = QComboBox()
        condition_layout.addWidget(self.student_label, 1, 0)
        condition_layout.addWidget(self.student_combo, 1, 1)
        
        condition_group.setLayout(condition_layout)
        layout.addWidget(condition_group)
        
        # 图表区域
        self.chart_frame = QFrame()
        self.chart_frame.setFrameShape(QFrame.StyledPanel)
        self.chart_frame.setStyleSheet("background-color: white;")
        self.chart_layout = QVBoxLayout(self.chart_frame)
        
        # 初始提示 - 不要删除这个标签
        self.chart_label = QLabel()
        self.chart_label.setAlignment(Qt.AlignLeft | Qt.AlignTop)  # 左对齐
        self.chart_label.setStyleSheet("color: #666; font-size: 10pt; padding: 10px;")
        self.chart_layout.addWidget(self.chart_label)
        
        # 设置初始提示
        self.set_initial_instruction()
        
        layout.addWidget(self.chart_frame, 1)
        
        # 按钮区域
        button_layout = QHBoxLayout()
        button_layout.setSpacing(15)
        
        self.generate_btn = QPushButton("生成图表")
        self.generate_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3; 
                color: white; 
                font-weight: bold;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        self.generate_btn.clicked.connect(self.generate_chart)
        
        self.export_btn = QPushButton("导出图表")
        self.export_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50; 
                color: white; 
                font-weight: bold;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.export_btn.clicked.connect(self.export_chart)
        
        # 添加打开图表目录按钮
        self.open_chart_dir_btn = QPushButton("打开目录")
        self.open_chart_dir_btn.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6; 
                color: white; 
                font-weight: bold;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
        """)
        self.open_chart_dir_btn.clicked.connect(self.open_chart_dir)
        
        # 添加重置表单按钮
        self.reset_btn = QPushButton("重置表单")
        self.reset_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3; 
                color: white; 
                font-weight: bold;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        self.reset_btn.clicked.connect(self.reset_form)
        
        button_layout.addStretch(1)
        button_layout.addWidget(self.generate_btn)
        button_layout.addWidget(self.export_btn)
        button_layout.addWidget(self.open_chart_dir_btn)
        button_layout.addWidget(self.reset_btn)
        button_layout.addStretch(1)
        
        layout.addLayout(button_layout)
        
        # 状态提示
        self.status_label = QLabel("")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #666; font-style: italic; font-size: 10pt;")
        layout.addWidget(self.status_label)
        
        self.setLayout(layout)
        
        # 刷新课程和学生列表
        self.refresh_courses()
        self.refresh_students()
    
    def set_initial_instruction(self):
        """设置初始提示文本"""
        instruction = """
请设置>>筛选分析条件<<，并生成图表
a.如选择[课程]，不选择[姓名]，生成课程[成绩分布图]
b.如选择[姓名]，不选择[课程]，生成学生[成绩饼状图]
c.如选择[课程]以及[姓名]，生成此学生的[成绩趋势图]

Tips:同一学生多个同课程成绩，自动取[最新值]
        """
        self.chart_label.setText(instruction)
    
    def refresh_courses(self):
        courses = get_all_courses()
        self.course_combo.clear()
        self.course_combo.addItem("")  # 添加空白选项
        self.course_combo.addItems(courses)
        if courses:
            self.course_combo.setCurrentIndex(0)
    
    def refresh_students(self):
        students = get_all_students()
        self.student_combo.clear()
        self.student_combo.addItem("")  # 添加空白选项
        self.student_combo.addItems(students)
        if students:
            self.student_combo.setCurrentIndex(0)
    
    def format_score(self, score):
        """格式化分数显示：整数显示整数，小数显示一位小数"""
        if score.is_integer():
            return str(int(score))
        return f"{score:.1f}"
    
    def generate_chart(self):
        # 获取分析条件
        selected_course = self.course_combo.currentText()
        selected_student = self.student_combo.currentText()
        
        # 检查是否至少选择了一个条件
        if not selected_course and not selected_student:
            log_message("请至少选择一个课程或一个学生", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            return
        
        # 清除之前的图表
        self.clear_chart_frame()
        
        # 隐藏初始提示文字
        self.chart_label.hide()
        
        # 存储图表数据用于导出
        self.chart_data = {
            'course': selected_course,
            'student': selected_student,
            'type': None
        }
        
        # 根据选择条件生成图表
        if selected_course and selected_student:
            # 学生单科成绩历史折线图
            data = get_course_grades(selected_course)
            student_data = [d for d in data if d['student'] == selected_student]
            
            if not student_data:
                log_message(f"没有找到{selected_student}的{selected_course}成绩记录", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
                self.chart_label.show()  # 如果没有数据，重新显示提示
                return
            
            # 按日期排序
            student_data.sort(key=lambda x: datetime.strptime(x['date'], "%Y-%m-%d"))
            
            dates = [d['date'] for d in student_data]
            scores = [d['score'] for d in student_data]
            min_score = min(scores)
            max_score = max(scores)
            full_score = student_data[0]['full_score']
            
            # 计算Y轴范围：最低分-10% 到 最高分+10%，但不超过满分
            y_min = max(0, min_score - (max_score - min_score) * 0.1)
            y_max = min(full_score, max_score + (max_score - min_score) * 0.1)
            
            # 确保y_max至少比y_min高10分
            if y_max - y_min < 10:
                y_min = max(0, y_min - 5)
                y_max = min(full_score, y_max + 5)
            
            fig, ax = plt.subplots(figsize=(4, 3))
            ax.plot(dates, scores, marker='o', color='#3498db', linewidth=1.5)
            
            # 设置Y轴范围
            ax.set_ylim(y_min, y_max)
            
            # 动态设置Y轴刻度间隔 - 根据分数范围调整刻度密度
            score_range = max_score - min_score
            if score_range <= 20:
                major_step = 2
                minor_step = 1
            elif score_range <= 50:
                major_step = 5
                minor_step = 1
            else:
                major_step = 10
                minor_step = 5
            
            # 设置Y轴刻度
            ax.yaxis.set_major_locator(MultipleLocator(major_step))
            ax.yaxis.set_minor_locator(MultipleLocator(minor_step))
            
            # 设置网格
            ax.grid(True, linestyle='--', alpha=0.5, which='both')
            
            # 计算最高分、最低分和平均分
            max_score_val = max(scores)
            min_score_val = min(scores)
            avg_score = sum(scores) / len(scores)
            
            # 找到最高分和最低分的位置
            max_idx = scores.index(max_score_val)
            min_idx = scores.index(min_score_val)
            
            # 计算图表高度
            chart_height = y_max - y_min
            
            # 标注最高分（使用空心圆） - 红色
            ax.plot(dates[max_idx], max_score_val, 'ro', markerfacecolor='none', markersize=10)
            max_text = f"Max: {self.format_score(max_score_val)}"
            
            # 根据位置选择放置位置
            if max_idx < len(dates) / 2:  # 最高分在图表前半部分
                # Max在左侧
                text_x = dates[0]
                min_box_x = dates[-1]  # Min在右侧
            else:
                # Max在右侧
                text_x = dates[-1]
                min_box_x = dates[0]  # Min在左侧
                
            ax.annotate(max_text, 
                        xy=(dates[max_idx], max_score_val),
                        xytext=(text_x, max_score_val + chart_height * 0.05),
                        arrowprops=dict(facecolor='red', arrowstyle='->', linestyle='dashed'),
                        fontsize=8,
                        color='red',
                        bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="red", alpha=0.7))
            
            # 标注最低分（使用空心圆） - 绿色
            ax.plot(dates[min_idx], min_score_val, 'go', markerfacecolor='none', markersize=10)
            min_text = f"Min: {self.format_score(min_score_val)}"
                
            ax.annotate(min_text, 
                        xy=(dates[min_idx], min_score_val),
                        xytext=(min_box_x, min_score_val - chart_height * 0.05),
                        arrowprops=dict(facecolor='green', arrowstyle='->', linestyle='dashed'),
                        fontsize=8,
                        color='green',
                        bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="green", alpha=0.7))
            
            # 标注平均分 - 横跨整个图表
            ax.axhline(avg_score, color='blue', linestyle='--', linewidth=1.2)
            avg_text = f"Avg: {self.format_score(avg_score)}"
            ax.annotate(avg_text, 
                        xy=(dates[0], avg_score),
                        xytext=(dates[0], avg_score + chart_height * 0.05),
                        fontsize=8,
                        color='blue',
                        bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="blue", alpha=0.7))
            
            # 在PyQt中显示图表（不显示标题）
            canvas = FigureCanvas(fig)
            self.chart_layout.addWidget(canvas)
            self.current_canvas = canvas
            
            # 存储数据用于导出
            self.chart_data['type'] = 'trend'
            self.chart_data['dates'] = dates
            self.chart_data['scores'] = scores
            self.chart_data['max_idx'] = max_idx
            self.chart_data['min_idx'] = min_idx
            self.chart_data['max_score'] = max_score_val
            self.chart_data['min_score'] = min_score_val
            self.chart_data['avg_score'] = avg_score
            self.chart_data['full_score'] = full_score
            self.chart_data['y_min'] = y_min
            self.chart_data['y_max'] = y_max
            
            log_message(f"已生成{selected_student}的{selected_course}成绩折线图", "success", 
                       self.main_window.log_text, self.main_window.log_checkbox.isChecked())
        
        elif selected_course and not selected_student:
            # 课程所有学生最近成绩条形图
            data = get_course_latest_grades(selected_course)
            
            if not data:
                log_message(f"没有找到{selected_course}的成绩记录", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
                self.chart_label.show()  # 如果没有数据，重新显示提示
                return
            
            # 按学生分组
            student_scores = {}
            for record in data:
                student = record['student']
                score = record['score']
                student_scores[student] = score
            
            students = list(student_scores.keys())
            scores = list(student_scores.values())
            
            # 计算平均分
            avg_score = sum(scores) / len(scores) if scores else 0
            
            fig, ax = plt.subplots(figsize=(4, 3))
            
            # 创建渐变颜色
            cmap = plt.cm.Blues
            colors = cmap(np.linspace(0.4, 0.8, len(students)))
            
            # 条形粗细减半（宽度从0.8改为0.4）
            bars = ax.bar(students, scores, color=colors, width=0.4)
            
            # 添加平均线（虚线，绿色） - 横跨整个图表
            ax.axhline(avg_score, color='green', linestyle='--', linewidth=1.2)
            
            # 在平均线上添加数值标签
            ax.text(0, avg_score, f'Avg: {self.format_score(avg_score)}', 
                    color='#006400', ha='right', va='center', fontsize=8,
                    bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="green", alpha=0.7))
            
            # 在PyQt中显示图表（不显示标题）
            # ax.set_title(f'{selected_course}课程成绩分布')  # 注释掉标题
            
            # 旋转x轴标签
            plt.xticks(rotation=90, ha='center')
            
            # 设置更密集的Y轴刻度
            ax.yaxis.set_major_locator(MultipleLocator(10))
            ax.yaxis.set_minor_locator(MultipleLocator(5))
            
            # 设置网格
            ax.grid(True, linestyle='--', alpha=0.5, which='both')
            
            # 在PyQt中显示图表
            canvas = FigureCanvas(fig)
            self.chart_layout.addWidget(canvas)
            self.current_canvas = canvas
            
            # 存储数据用于导出
            self.chart_data['type'] = 'course'
            self.chart_data['students'] = students
            self.chart_data['scores'] = scores
            self.chart_data['avg_score'] = avg_score
            
            log_message(f"已生成{selected_course}课程成绩条形图", "success", 
                       self.main_window.log_text, self.main_window.log_checkbox.isChecked())
        
        elif not selected_course and selected_student:
            # 学生所有课程最近成绩饼图
            data = get_student_grades(selected_student)
            
            if not data:
                log_message(f"没有找到{selected_student}的成绩记录", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
                self.chart_label.show()  # 如果没有数据，重新显示提示
                return
            
            # 按课程分组，取最近一次成绩
            course_scores = {}
            for record in data:
                course = record['course']
                date = record['date']
                score = record['score']
                full = record['full_score']
                
                # 如果该课程还没有记录，或者日期更近，则更新
                if course not in course_scores or datetime.strptime(date, "%Y-%m-%d") > datetime.strptime(course_scores[course]['date'], "%Y-%m-%d"):
                    course_scores[course] = {
                        'score': score,
                        'full': full,
                        'date': date,
                        'lost': full - score  # 计算扣分
                    }
            
            # 计算失分比例
            courses = []
            lost_points = []
            lost_abs = []  # 扣分绝对值
            for course, info in course_scores.items():
                courses.append(course)
                lost_points.append(info['lost'])
                lost_abs.append(info['lost'])
            
            # 生成饼图
            fig, ax = plt.subplots(figsize=(4, 3))
            colors = plt.cm.Pastel1.colors
            
            # 设置爆炸效果和阴影，使图形更立体
            explode = [0.05] * len(courses)  # 每个扇区稍微分离
            
            # 先绘制饼图，只显示百分比
            wedges, texts, autotexts = ax.pie(
                lost_points, 
                labels=courses, 
                autopct=lambda p: f'{p:.1f}%' if p > 5 else '',
                startangle=90,
                colors=colors,
                explode=explode,
                shadow=True,  # 添加阴影
                wedgeprops={'edgecolor': 'w', 'linewidth': 0.8},
                textprops={'fontsize': 7}
            )
            
            # 修改autotexts，添加扣分信息（对于大于5%的扇区）
            for i, p in enumerate(autotexts):
                # 获取当前扇区的百分比
                pct = lost_points[i] / sum(lost_points) * 100
                if pct > 5:
                    p.set_text(f"{pct:.1f}%\n(扣分:{lost_abs[i]:.1f})")
            
            # 对于比例太小的扇区（小于等于5%），添加额外的标注
            for i in range(len(courses)):
                pct = lost_points[i] / sum(lost_points) * 100
                if pct <= 5:
                    # 计算标注位置
                    ang = (wedges[i].theta2 - wedges[i].theta1)/2. + wedges[i].theta1
                    y = np.sin(np.deg2rad(ang))
                    x = np.cos(np.deg2rad(ang))
                    horizontalalignment = {-1: "right", 1: "left"}[int(np.sign(x))]
                    connectionstyle = f"angle,angleA=0,angleB={ang}"
                    ax.annotate(f'{pct:.1f}%\n(扣分:{lost_abs[i]:.1f})',
                                xy=(x, y),
                                xytext=(1.35*np.sign(x), 1.4*y),
                                horizontalalignment=horizontalalignment,
                                fontsize=7,
                                arrowprops=dict(arrowstyle="-", connectionstyle=connectionstyle, color="gray"))
            
            # 在PyQt中显示图表（不显示标题）
            # ax.set_title(f'{selected_student}各科失分比例')  # 注释掉标题
            
            # 在PyQt中显示图表
            canvas = FigureCanvas(fig)
            self.chart_layout.addWidget(canvas)
            self.current_canvas = canvas
            
            # 存储数据用于导出
            self.chart_data['type'] = 'student'
            self.chart_data['courses'] = courses
            self.chart_data['lost_points'] = lost_points
            self.chart_data['lost_abs'] = lost_abs
            
            log_message(f"已生成{selected_student}各科成绩饼图", "success", 
                       self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def reset_form(self):
        """重置表单到初始状态"""
        self.course_combo.setCurrentIndex(0)
        self.student_combo.setCurrentIndex(0)
        self.clear_chart_frame()
        self.chart_label.show()  # 确保提示标签可见
        self.set_initial_instruction()  # 重新设置初始提示
        self.chart_data = None
        log_message("已重置筛选分析条件", "info", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def clear_chart_frame(self):
        # 清除图表区域的所有图表内容（保留提示标签）
        if self.current_canvas is not None:
            self.chart_layout.removeWidget(self.current_canvas)
            self.current_canvas.deleteLater()
            self.current_canvas = None
    
    def export_chart(self):
        # 检查是否有图表数据
        if self.chart_data is None or self.chart_data['type'] is None:
            log_message("没有可导出的图表", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            return
        
        # 确定保存路径
        selected_course = self.chart_data['course']
        selected_student = self.chart_data['student']
        
        if selected_course and selected_student:
            filename = f"{selected_student}_{selected_course}_成绩变化.png"
            save_dir = os.path.join(BASE_DIR, "report", "by_trend")
        elif selected_course and not selected_student:
            filename = f"{selected_course}_成绩分布.png"
            save_dir = os.path.join(BASE_DIR, "report", "by_course")
        elif not selected_course and selected_student:
            filename = f"{selected_student}_各科成绩.png"
            save_dir = os.path.join(BASE_DIR, "report", "by_student")
        else:
            filename = "成绩图表.png"
            save_dir = os.path.join(BASE_DIR, "report")
        
        # 添加月日前缀
        month_day = datetime.now().strftime("%m-%d")
        filename = f"{month_day}_{filename}"
        
        # 确保目录存在
        if not os.path.exists(save_dir):
            os.makedirs(save_dir, exist_ok=True)
        
        save_path = os.path.join(save_dir, filename)
        
        # 根据图表类型创建导出图表
        fig = self.create_export_chart()
        
        if fig is None:
            log_message("导出图表失败", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            return
        
        # 保存图像
        fig.savefig(save_path, dpi=100, bbox_inches='tight')
        plt.close(fig)
        
        log_message(f"图表已导出到: {save_path}", "success", 
                   self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def open_chart_dir(self):
        """打开图表保存目录"""
        # 根据当前图表类型确定目录
        if self.chart_data is None:
            save_dir = os.path.join(BASE_DIR, "report")
        elif self.chart_data['type'] == 'trend':
            save_dir = os.path.join(BASE_DIR, "report", "by_trend")
        elif self.chart_data['type'] == 'course':
            save_dir = os.path.join(BASE_DIR, "report", "by_course")
        elif self.chart_data['type'] == 'student':
            save_dir = os.path.join(BASE_DIR, "report", "by_student")
        else:
            save_dir = os.path.join(BASE_DIR, "report")
        
        # 确保目录存在
        if not os.path.exists(save_dir):
            os.makedirs(save_dir, exist_ok=True)
        
        # 打开目录
        QDesktopServices.openUrl(QUrl.fromLocalFile(save_dir))
        
        log_message(f"已打开图表目录: {save_dir}", "info", 
                   self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def format_score(self, score):
        """格式化分数显示：整数显示整数，小数显示一位小数"""
        if score.is_integer():
            return str(int(score))
        return f"{score:.1f}"
    
    def create_export_chart(self):
        """创建用于导出的图表（包含标题）"""
        if self.chart_data is None:
            return None
        
        chart_type = self.chart_data['type']
        
        if chart_type == 'trend':
            # 趋势图（课程和学生都选择）
            fig, ax = plt.subplots(figsize=(8, 4.5))
            
            dates = self.chart_data['dates']
            scores = self.chart_data['scores']
            max_idx = self.chart_data['max_idx']
            min_idx = self.chart_data['min_idx']
            max_score = self.chart_data['max_score']
            min_score = self.chart_data['min_score']
            avg_score = self.chart_data['avg_score']
            full_score = self.chart_data['full_score']
            
            # 使用存储的Y轴范围
            y_min = self.chart_data['y_min']
            y_max = self.chart_data['y_max']
            
            ax.plot(dates, scores, marker='o', color='#3498db', linewidth=2)
            
            # 设置Y轴范围
            ax.set_ylim(y_min, y_max)
            
            # 动态设置Y轴刻度间隔 - 根据分数范围调整刻度密度
            score_range = max_score - min_score
            if score_range <= 20:
                major_step = 2
                minor_step = 1
            elif score_range <= 50:
                major_step = 5
                minor_step = 1
            else:
                major_step = 10
                minor_step = 5
            
            # 设置Y轴刻度
            ax.yaxis.set_major_locator(MultipleLocator(major_step))
            ax.yaxis.set_minor_locator(MultipleLocator(minor_step))
            
            # 设置网格
            ax.grid(True, linestyle='--', alpha=0.5, which='both')
            
            # 添加标题（导出时显示）
            ax.set_title(f'{self.chart_data["student"]}的{self.chart_data["course"]}成绩变化', fontsize=12)
            
            # 旋转x轴标签
            plt.xticks(rotation=45, ha='right', fontsize=9)
            
            # 计算图表高度
            chart_height = y_max - y_min
            
            # 标注最高分（使用空心圆） - 红色
            ax.plot(dates[max_idx], max_score, 'ro', markerfacecolor='none', markersize=12)
            max_text = f"Max: {self.format_score(max_score)}"
            
            # 根据位置选择放置位置
            if max_idx < len(dates) / 2:  # 最高分在图表前半部分
                # Max在左侧
                text_x = dates[0]
                min_box_x = dates[-1]  # Min在右侧
            else:
                # Max在右侧
                text_x = dates[-1]
                min_box_x = dates[0]  # Min在左侧
                
            ax.annotate(max_text, 
                        xy=(dates[max_idx], max_score),
                        xytext=(text_x, max_score + chart_height * 0.05),
                        arrowprops=dict(facecolor='red', arrowstyle='->', linestyle='dashed'),
                        fontsize=10,
                        color='red',
                        bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="red", alpha=0.7))
            
            # 标注最低分（使用空心圆） - 绿色
            ax.plot(dates[min_idx], min_score, 'go', markerfacecolor='none', markersize=12)
            min_text = f"Min: {self.format_score(min_score)}"
                
            ax.annotate(min_text, 
                        xy=(dates[min_idx], min_score),
                        xytext=(min_box_x, min_score - chart_height * 0.05),
                        arrowprops=dict(facecolor='green', arrowstyle='->', linestyle='dashed'),
                        fontsize=10,
                        color='green',
                        bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="green", alpha=0.7))
            
            # 标注平均分 - 横跨整个图表
            ax.axhline(avg_score, color='blue', linestyle='--', linewidth=1.5)
            avg_text = f"Avg: {self.format_score(avg_score)}"
            ax.annotate(avg_text, 
                        xy=(dates[0], avg_score),
                        xytext=(dates[0], avg_score + chart_height * 0.05),
                        fontsize=10,
                        color='blue',
                        bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="blue", alpha=0.7))
            
            return fig
        
        elif chart_type == 'course':
            # 课程成绩分布图
            fig, ax = plt.subplots(figsize=(8, 4.5))
            
            students = self.chart_data['students']
            scores = self.chart_data['scores']
            avg_score = self.chart_data['avg_score']
            
            # 创建渐变颜色
            cmap = plt.cm.Blues
            colors = cmap(np.linspace(0.4, 0.8, len(students)))
            
            # 条形粗细减半（宽度从0.8改为0.4）
            bars = ax.bar(students, scores, color=colors, width=0.4)
            
            # 添加平均线
            ax.axhline(avg_score, color='green', linestyle='--', linewidth=1.5)
            
            # 在平均线上添加数值标签
            ax.text(0, avg_score, f'Avg: {self.format_score(avg_score)}', 
                    color='#006400', ha='right', va='center', fontsize=10,
                    bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="green", alpha=0.7))
            
            # 添加标题（导出时显示）
            ax.set_title(f'{self.chart_data["course"]}课程成绩分布', fontsize=12)
            
            # 旋转x轴标签
            plt.xticks(rotation=90, ha='center', fontsize=9)
            
            # 设置Y轴刻度
            ax.yaxis.set_major_locator(MultipleLocator(10))
            ax.yaxis.set_minor_locator(MultipleLocator(5))
            
            # 设置网格
            ax.grid(True, linestyle='--', alpha=0.5, which='both')
            
            return fig
        
        elif chart_type == 'student':
            # 学生成绩饼图
            fig, ax = plt.subplots(figsize=(8, 4.5))
            
            courses = self.chart_data['courses']
            lost_points = self.chart_data['lost_points']
            lost_abs = self.chart_data['lost_abs']
            
            colors = plt.cm.Pastel1.colors
            
            # 设置爆炸效果和阴影，使图形更立体
            explode = [0.05] * len(courses)  # 每个扇区稍微分离
            
            # 先绘制饼图，只显示百分比
            wedges, texts, autotexts = ax.pie(
                lost_points, 
                labels=courses, 
                autopct=lambda p: f'{p:.1f}%' if p > 5 else '',
                startangle=90,
                colors=colors,
                explode=explode,
                shadow=True,  # 添加阴影
                wedgeprops={'edgecolor': 'w', 'linewidth': 1},
                textprops={'fontsize': 9}
            )
            
            # 修改autotexts，添加扣分信息（对于大于5%的扇区）
            for i, p in enumerate(autotexts):
                # 获取当前扇区的百分比
                pct = lost_points[i] / sum(lost_points) * 100
                if pct > 5:
                    p.set_text(f"{pct:.1f}%\n(扣分:{lost_abs[i]:.1f})")
            
            # 对于比例太小的扇区（小于等于5%），添加额外的标注
            for i in range(len(courses)):
                pct = lost_points[i] / sum(lost_points) * 100
                if pct <= 5:
                    # 计算标注位置
                    ang = (wedges[i].theta2 - wedges[i].theta1)/2. + wedges[i].theta1
                    y = np.sin(np.deg2rad(ang))
                    x = np.cos(np.deg2rad(ang))
                    horizontalalignment = {-1: "right", 1: "left"}[int(np.sign(x))]
                    connectionstyle = f"angle,angleA=0,angleB={ang}"
                    ax.annotate(f'{pct:.1f}%\n(扣分:{lost_abs[i]:.1f})',
                                xy=(x, y),
                                xytext=(1.35*np.sign(x), 1.4*y),
                                horizontalalignment=horizontalalignment,
                                fontsize=9,
                                arrowprops=dict(arrowstyle="-", connectionstyle=connectionstyle, color="gray"))
            
            # 设置标题（导出时显示）
            ax.set_title(f'{self.chart_data["student"]}各科失分比例', fontsize=12)
            
            return fig
        
        return None


class ConfigPage(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.main_window = parent
        self.initUI()
        
    def initUI(self):
        layout = QVBoxLayout()
        layout.setSpacing(10)
        layout.setContentsMargins(15, 10, 15, 10)
        
        # 课程配置
        course_group = QGroupBox("课程参数配置管理")
        course_layout = QVBoxLayout()
        
        self.course_list = QListWidget()
        self.course_list.setMaximumHeight(120)
        self.course_list.setSelectionMode(QAbstractItemView.SingleSelection)
        course_layout.addWidget(self.course_list)
        
        # 课程按钮
        button_layout = QHBoxLayout()
        
        self.add_course_btn = QPushButton("添加课程")
        self.add_course_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50; 
                color: white;
                padding: 5px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.add_course_btn.clicked.connect(self.add_course)
        
        self.delete_course_btn = QPushButton("删除课程")
        self.delete_course_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336; 
                color: white;
                padding: 5px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        self.delete_course_btn.clicked.connect(self.delete_course)
        
        button_layout.addWidget(self.add_course_btn)
        button_layout.addWidget(self.delete_course_btn)
        
        course_layout.addLayout(button_layout)
        course_group.setLayout(course_layout)
        layout.addWidget(course_group)
        
        # 成绩配置
        score_group = QGroupBox("课程满分值设置")
        score_layout = QGridLayout()
        score_layout.setSpacing(10)
        
        self.score_label = QLabel("课程满分值:")
        self.score_entry = QLineEdit()
        self.score_entry.setReadOnly(True)
        
        self.edit_score_btn = QPushButton("修改")
        self.edit_score_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3; 
                color: white;
                padding: 5px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        self.edit_score_btn.clicked.connect(self.enable_score_edit)
        
        self.save_score_btn = QPushButton("生效")
        self.save_score_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50; 
                color: white;
                padding: 5px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.save_score_btn.setEnabled(False)
        self.save_score_btn.clicked.connect(self.save_score_edit)
        
        score_layout.addWidget(self.score_label, 0, 0)
        score_layout.addWidget(self.score_entry, 0, 1)
        score_layout.addWidget(self.edit_score_btn, 0, 2)
        score_layout.addWidget(self.save_score_btn, 0, 3)
        
        score_group.setLayout(score_layout)
        layout.addWidget(score_group)
        
        # 状态提示
        self.status_label = QLabel("")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setStyleSheet("color: #666; font-style: italic; font-size: 10pt;")
        layout.addWidget(self.status_label)
        
        self.setLayout(layout)
        
        # 刷新配置信息
        self.refresh_config()
    
    def refresh_config(self):
        courses, full_score = read_config()
        
        # 更新课程列表
        self.course_list.clear()
        self.course_list.addItems(courses)
        
        # 更新满分值
        self.score_entry.setText(str(full_score))
    
    def add_course(self):
        new_course, ok = QInputDialog.getText(self, "添加课程", "请输入新课程名称:")
        if ok and new_course.strip():
            new_course = new_course.strip()
            courses, full_score = read_config()
            
            if new_course in courses:
                log_message(f"课程 '{new_course}' 已存在", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
                return
            
            courses.append(new_course)
            save_config(courses, full_score)
            self.refresh_config()
            log_message(f"已添加课程: {new_course}", "success", 
                       self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def delete_course(self):
        selected = self.course_list.currentRow()
        if selected < 0:
            log_message("请先选择一个课程", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            return
        
        course_to_delete = self.course_list.item(selected).text()
        
        # 确认对话框
        reply = QMessageBox.question(self, "确认删除", 
                                    f"确定要删除课程 '{course_to_delete}' 吗？\n这也会删除该课程的所有成绩记录！",
                                    QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.No:
            return
        
        courses, full_score = read_config()
        if course_to_delete in courses:
            courses.remove(course_to_delete)
            save_config(courses, full_score)
            
            # 删除课程成绩文件
            course_file = os.path.join(BASE_DIR, "config", "course_grades", f"{course_to_delete}.txt")
            if os.path.exists(course_file):
                try:
                    os.remove(course_file)
                    log_message(f"已删除课程文件: {course_to_delete}", "warning", 
                               self.main_window.log_text, self.main_window.log_checkbox.isChecked())
                except Exception as e:
                    log_message(f"删除课程文件错误: {str(e)}", "error", 
                               self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            
            self.refresh_config()
            log_message(f"已删除课程: {course_to_delete}", "warning", 
                       self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def enable_score_edit(self):
        self.score_entry.setReadOnly(False)
        self.edit_score_btn.setEnabled(False)
        self.save_score_btn.setEnabled(True)
        log_message("满分值编辑已启用", "info", 
                   self.main_window.log_text, self.main_window.log_checkbox.isChecked())
    
    def save_score_edit(self):
        try:
            new_score = int(self.score_entry.text())
            if new_score <= 0:
                raise ValueError("满分值必须为正整数")
            if new_score > 300:
                raise ValueError("满分值不能超过300")
        except ValueError as e:
            log_message(f"无效的满分值: {str(e)}", "error", self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            return
        
        courses, _ = read_config()
        save_config(courses, new_score)
        
        # 更新信息录入页的满分值显示
        self.main_window.input_page.update_full_score(new_score)
        
        self.score_entry.setReadOnly(True)
        self.edit_score_btn.setEnabled(True)
        self.save_score_btn.setEnabled(False)
        log_message(f"满分值已更新为: {new_score}", "success", 
                   self.main_window.log_text, self.main_window.log_checkbox.isChecked())


class HoverImageLabel(QLabel):
    """自定义QLabel实现鼠标悬停效果"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.normal_image = None
        self.hover_image = None
        self.setScaledContents(True)
        self.setFixedSize(120, 120)  # 固定大小
        
        # 加载图片
        self.load_images()
        
    def load_images(self):
        """从Base64加载图片"""
        try:
            # 加载正常状态图片
            normal_data = base64.b64decode(SL_IMAGE_BASE64)
            normal_image = QImage()
            normal_image.loadFromData(normal_data)
            self.normal_image = QPixmap.fromImage(normal_image)
            
            # 加载悬停状态图片
            hover_data = base64.b64decode(ALSA_IMAGE_BASE64)
            hover_image = QImage()
            hover_image.loadFromData(hover_data)
            self.hover_image = QPixmap.fromImage(hover_image)
            
            # 设置初始图片
            self.setPixmap(self.normal_image.scaled(
                120, 120, Qt.KeepAspectRatio, Qt.SmoothTransformation
            ))
        except Exception as e:
            print(f"图片加载失败: {str(e)}")
            self.create_default_image()

    def create_default_image(self):
        """创建带文字的默认图片"""
        img = QImage(120, 120, QImage.Format_RGB32)
        img.fill(QColor(240, 240, 240))
        
        painter = QPainter(img)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.setPen(QColor(100, 100, 100))
        painter.setFont(QFont("Microsoft YaHei", 9))
        
        # 绘制边框
        painter.drawRect(0, 0, 119, 119)
        
        # 绘制文字
        painter.drawText(img.rect(), Qt.AlignCenter, "图片加载失败")
        painter.end()
        
        pixmap = QPixmap.fromImage(img)
        self.setPixmap(pixmap)
        self.normal_image = pixmap
        self.hover_image = pixmap

    def enterEvent(self, event):
        """鼠标进入事件 - 切换到悬停图片"""
        if self.hover_image:
            self.setPixmap(self.hover_image.scaled(
                120, 120, Qt.KeepAspectRatio, Qt.SmoothTransformation
            ))

    def leaveEvent(self, event):
        """鼠标离开事件 - 切换回正常图片"""
        if self.normal_image:
            self.setPixmap(self.normal_image.scaled(
                120, 120, Qt.KeepAspectRatio, Qt.SmoothTransformation
            ))


class AboutPage(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.initUI()
        
    def initUI(self):
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(15, 10, 15, 10)
                
        # 系统信息
        info_text = """

        <p>用于成绩的录入、管理和图表分析，主要功能包括：</p>
        
        <ul>
            <li>支持配置区设置各参数，检索、删除历史记录</li>
            <li>支持各学科及成绩的增减、录入、修改及导出</li>
            <li>支持各类成绩、管理图表的智能化统计及导出</li>
        </ul>
   
        <p>操作记录于下方日志区实时显示，亦可选择是否保存。</p>
        <hr>
        <p style="text-align: right;">Happiness around the corner.</p>
        """
        
        info_label = QLabel(info_text)
        info_label.setWordWrap(True)
        info_label.setAlignment(Qt.AlignLeft)
        info_label.setStyleSheet("font-size: 10pt;")
        layout.addWidget(info_label)
        
        # 二维码区域
        qr_frame = QFrame()
        qr_layout = QHBoxLayout(qr_frame)
        qr_layout.setContentsMargins(0, 0, 0, 0)
        
        # 使用自定义图片标签
        self.qr_label = HoverImageLabel()
        
        # 右侧技术支持信息
        support_text = """
        <p style="font-size: 9pt;">Version : 1.1</p>
        <p style="font-size: 9pt;">Support : DeepSeek | Doubao</p>
        <p style="font-size: 9pt;">Mail : rizona.cn@gmail.com</p>
        <p style="font-size: 9pt;">Date : 2025.07</p>
        """
        support_label = QLabel(support_text)
        
        qr_layout.addWidget(self.qr_label)
        qr_layout.addWidget(support_label)
        layout.addWidget(qr_frame)
        
        self.setLayout(layout)


class DeleteDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.main_window = parent
        self.setWindowTitle("删除成绩记录")
        self.setMinimumSize(300, 400)  # 改为最小尺寸，允许调整窗口大小
        # 去除右上角的问号按钮
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        self.initUI()
        
    def initUI(self):
        layout = QVBoxLayout()
        layout.setSpacing(10)
        layout.setContentsMargins(15, 15, 15, 15)
        
        # 搜索条件
        condition_group = QGroupBox("搜索条件")
        condition_layout = QGridLayout()
        condition_layout.setSpacing(10)
        condition_layout.setColumnStretch(1, 1)  # 增加第二列的拉伸因子
        
        # 课程选择
        self.course_label = QLabel("课程:")
        self.course_combo = QComboBox()
        condition_layout.addWidget(self.course_label, 0, 0)
        condition_layout.addWidget(self.course_combo, 0, 1)
        
        # 学生选择
        self.student_label = QLabel("姓名:")
        self.student_combo = QComboBox()
        condition_layout.addWidget(self.student_label, 1, 0)
        condition_layout.addWidget(self.student_combo, 1, 1)
        
        # 日期选择
        self.date_label = QLabel("日期:")
        self.date_entry = QDateEdit()
        self.date_entry.setCalendarPopup(True)
        self.date_entry.setDate(QDate.currentDate())
        self.date_entry.setDisplayFormat("yyyy-MM-dd")
        condition_layout.addWidget(self.date_label, 2, 0)
        condition_layout.addWidget(self.date_entry, 2, 1)
        
        # 日期条件启用复选框
        self.date_checkbox = QCheckBox("启用日期条件")
        self.date_checkbox.setChecked(False)  # 默认不启用日期条件
        self.date_checkbox.stateChanged.connect(self.toggle_date_entry)
        condition_layout.addWidget(self.date_checkbox, 3, 0, 1, 2)
        
        condition_group.setLayout(condition_layout)
        layout.addWidget(condition_group)
        
        # 搜索按钮区域
        search_btn_layout = QHBoxLayout()
        
        # 搜索按钮 - 长度减半
        self.search_btn = QPushButton("搜索记录")
        self.search_btn.setFixedWidth(120)  # 设置固定宽度
        self.search_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3; 
                color: white;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        self.search_btn.clicked.connect(self.search_records)
        
        # 重置搜索按钮
        self.reset_btn = QPushButton("重置搜索")
        self.reset_btn.setFixedWidth(120)
        self.reset_btn.setStyleSheet("""
            QPushButton {
                background-color: #9e9e9e; 
                color: white;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #757575;
            }
        """)
        self.reset_btn.clicked.connect(self.reset_search)
        
        search_btn_layout.addWidget(self.search_btn)
        search_btn_layout.addWidget(self.reset_btn)
        layout.addLayout(search_btn_layout)
        
        # 结果列表 - 直接使用QListWidget的自带滚动条
        result_group = QGroupBox("搜索结果")
        result_layout = QVBoxLayout()
        
        # 修复问题：添加滚动条
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setMinimumHeight(150)
        
        self.result_list = QListWidget()
        self.result_list.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)  # 确保滚动条可见
        scroll_area.setWidget(self.result_list)
        
        result_layout.addWidget(scroll_area)
        result_group.setLayout(result_layout)
        layout.addWidget(result_group)
        
        # 删除按钮
        self.delete_btn = QPushButton("删除选中记录")
        self.delete_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336; 
                color: white;
                padding: 6px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        self.delete_btn.clicked.connect(self.delete_selected)
        layout.addWidget(self.delete_btn)
        
        self.setLayout(layout)
        
        # 填充数据
        self.refresh_courses()
        self.refresh_students()
        
        # 初始禁用日期输入框
        self.date_entry.setEnabled(False)
    
    def toggle_date_entry(self, state):
        """根据复选框状态启用/禁用日期输入框"""
        self.date_entry.setEnabled(state == Qt.Checked)
    
    def refresh_courses(self):
        courses = get_all_courses()
        self.course_combo.clear()
        self.course_combo.addItem("")  # 添加空白选项
        self.course_combo.addItems(courses)
        if courses:
            self.course_combo.setCurrentIndex(0)
    
    def refresh_students(self):
        students = get_all_students()
        self.student_combo.clear()
        self.student_combo.addItem("")  # 添加空白选项
        self.student_combo.addItems(students)
        if students:
            self.student_combo.setCurrentIndex(0)
    
    def reset_search(self):
        """重置搜索条件和结果"""
        self.course_combo.setCurrentIndex(0)
        self.student_combo.setCurrentIndex(0)
        self.date_entry.setDate(QDate.currentDate())  # 重置为当天
        self.date_checkbox.setChecked(False)  # 重置复选框状态
        self.result_list.clear()
    
    def search_records(self):
        course = self.course_combo.currentText().strip()
        student = self.student_combo.currentText().strip()
        date = self.date_entry.date().toString("yyyy-MM-dd") if self.date_checkbox.isChecked() else ""
        
        self.result_list.clear()
        
        # 获取所有课程
        courses_to_search = [course] if course else get_all_courses()
        records = []
        
        for c in courses_to_search:
            data = get_course_grades(c)
            for record in data:
                # 检查匹配条件 - 支持模糊搜索
                match = True
                
                # 学生匹配（支持部分匹配）
                if student and student not in record['student']:
                    match = False
                
                # 日期匹配（如果启用了日期条件）
                if date and record['date'] != date:
                    match = False
                
                if match:
                    records.append((
                        c, 
                        record['student'], 
                        record['date'], 
                        record['score'], 
                        record['full_score'],
                        record['remarks']
                    ))
        
        if not records:
            self.result_list.addItem("没有找到匹配的记录")
            return
        
        # 按课程、学生和日期排序
        records.sort(key=lambda x: (x[0], x[1], datetime.strptime(x[2], "%Y-%m-%d")))
        
        # 格式化显示成绩记录 - 关键修改：使用要求的格式
        for r in records:
            # 格式：课程|学生|日期|成绩[满分]|备注
            score_str = f"{r[3]}[{r[4]}]"
            if r[5]:  # 如果有备注
                self.result_list.addItem(f"{r[0]}|{r[1]}|{r[2]}|{score_str}|{r[5]}")
            else:
                self.result_list.addItem(f"{r[0]}|{r[1]}|{r[2]}|{score_str}")
    
    def delete_selected(self):
        selected = self.result_list.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "警告", "请先选择一条记录")
            return
        
        selected_text = self.result_list.item(selected).text().strip()
        
        # 解析精简格式：课程|学生|日期|成绩[满分]|备注
        if "|" not in selected_text:
            return
        
        parts = selected_text.split("|")
        if len(parts) < 4:
            return
        
        # 提取课程、学生、日期
        course = parts[0].strip()
        student = parts[1].strip()
        date = parts[2].strip()
        
        # 确认删除
        reply = QMessageBox.question(self, "确认删除", 
                                    f"确定要删除这条记录吗？\n课程: {course}\n学生: {student}\n日期: {date}",
                                    QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.No:
            return
        
        # 执行删除
        if delete_grade_record(course, student, date):
            # 重新搜索记录
            self.search_records()
            log_message(f"已删除记录: {student}的{course}成绩 ({date})", "warning", 
                       self.main_window.log_text, self.main_window.log_checkbox.isChecked())
            
            # 刷新学生列表（确保删除后列表更新）
            self.main_window.analysis_page.refresh_students()
            
            QMessageBox.information(self, "成功", "记录已删除")


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("成绩管理程序")
        self.setFixedSize(400, 600)  # 固定窗口大小
        
        # 设置窗口图标
        try:
            icon_data = base64.b64decode(APP_ICON_BASE64)
            icon_image = QImage()
            icon_image.loadFromData(icon_data)
            self.setWindowIcon(QIcon(QPixmap.fromImage(icon_image)))
        except Exception as e:
            print(f"图标加载失败: {str(e)}")
        
        # 创建目录结构
        create_directories()
        
        # 初始化UI
        self.initUI()
        
        # 初始日志
        log_message("系统启动成功", "success", self.log_text, self.log_checkbox.isChecked())
    
    def initUI(self):
        # 主布局
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        main_layout.setSpacing(5)
        main_layout.setContentsMargins(5, 5, 5, 5)
        
        # 顶部导航栏
        nav_frame = QFrame()
        nav_frame.setStyleSheet("background-color: #f0f2f5; border-radius: 4px;")
        nav_layout = QHBoxLayout()
        nav_layout.setSpacing(5)
        nav_layout.setContentsMargins(5, 5, 5, 5)
        
        # 导航按钮
        self.input_btn = QPushButton("信息录入")
        self.input_btn.setFixedSize(90, 35)
        self.input_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                font-weight: bold;
                border-radius: 4px;
                font-size: 10pt;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        self.input_btn.clicked.connect(lambda: self.show_page(0))
        
        self.analysis_btn = QPushButton("成绩分析")
        self.analysis_btn.setFixedSize(90, 35)
        self.analysis_btn.setStyleSheet("""
            QPushButton {
                background-color: #2ecc71;
                color: white;
                font-weight: bold;
                border-radius: 4px;
                font-size: 10pt;
            }
            QPushButton:hover {
                background-color: #27ae60;
            }
        """)
        self.analysis_btn.clicked.connect(lambda: self.show_page(1))
        
        self.config_btn = QPushButton("系统配置")
        self.config_btn.setFixedSize(90, 35)
        self.config_btn.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                font-weight: bold;
                border-radius: 4px;
                font-size: 10pt;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
        """)
        self.config_btn.clicked.connect(lambda: self.show_page(2))
        
        self.about_btn = QPushButton("关于程序")
        self.about_btn.setFixedSize(90, 35)
        self.about_btn.setStyleSheet("""
            QPushButton {
                background-color: #e67e22;
                color: white;
                font-weight: bold;
                border-radius: 4px;
                font-size: 10pt;
            }
            QPushButton:hover {
                background-color: #d35400;
            }
        """)
        self.about_btn.clicked.connect(lambda: self.show_page(3))
        
        nav_layout.addWidget(self.input_btn)
        nav_layout.addWidget(self.analysis_btn)
        nav_layout.addWidget(self.config_btn)
        nav_layout.addWidget(self.about_btn)
        nav_frame.setLayout(nav_layout)
        
        main_layout.addWidget(nav_frame)
        
        # 页面堆栈
        self.stacked_widget = QStackedWidget()
        
        # 添加页面
        self.input_page = InputPage(self)
        self.analysis_page = AnalysisPage(self)
        self.config_page = ConfigPage(self)
        self.about_page = AboutPage(self)
        
        self.stacked_widget.addWidget(self.input_page)
        self.stacked_widget.addWidget(self.analysis_page)
        self.stacked_widget.addWidget(self.config_page)
        self.stacked_widget.addWidget(self.about_page)
        
        main_layout.addWidget(self.stacked_widget, 1)
        
        # 日志区域
        log_group = QGroupBox("日志记录区")
        log_layout = QVBoxLayout()
        
        # 日志控制区域
        log_control_layout = QHBoxLayout()
        
        self.log_checkbox = QCheckBox("保存日志到文件")
        self.log_checkbox.setChecked(True)
        log_control_layout.addWidget(self.log_checkbox)
        
        # 添加打开日志目录按钮
        self.open_log_dir_btn = QPushButton("打开日志目录")
        self.open_log_dir_btn.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                padding: 3px;
                border-radius: 3px;
                font-size: 9pt;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
        """)
        self.open_log_dir_btn.setFixedSize(100, 25)
        self.open_log_dir_btn.clicked.connect(self.open_log_dir)
        log_control_layout.addWidget(self.open_log_dir_btn)
        
        # 添加清空日志按钮
        self.clear_log_btn = QPushButton("清空日志")
        self.clear_log_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                padding: 3px;
                border-radius: 3px;
                font-size: 9pt;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        self.clear_log_btn.setFixedSize(80, 25)
        self.clear_log_btn.clicked.connect(self.clear_logs)
        log_control_layout.addWidget(self.clear_log_btn)
        
        log_control_layout.addStretch(1)
        
        log_layout.addLayout(log_control_layout)
        
        # 日志显示区域
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("""
            background-color: white; 
            font-family: Consolas, Courier New; 
            font-size: 9pt;
        """)
        log_layout.addWidget(self.log_text)
        
        log_group.setLayout(log_layout)
        log_group.setMaximumHeight(150)
        
        main_layout.addWidget(log_group)
        
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)
        
        # 默认显示第一页
        self.show_page(0)
    
    def open_log_dir(self):
        """打开日志目录"""
        log_dir = os.path.join(BASE_DIR, "logs")
        # 确保目录存在
        if not os.path.exists(log_dir):
            os.makedirs(log_dir, exist_ok=True)
        
        # 打开目录
        QDesktopServices.openUrl(QUrl.fromLocalFile(log_dir))
        
        log_message("已打开日志目录", "info", self.log_text, self.log_checkbox.isChecked())
    
    def clear_logs(self):
        """清空日志文件和日志显示区域"""
        # 清空日志文件
        if clear_log_files():
            # 清空日志显示区域
            self.log_text.clear()
            log_message("日志文件已清空", "success", self.log_text, self.log_checkbox.isChecked())
        else:
            log_message("清空日志文件失败", "error", self.log_text, self.log_checkbox.isChecked())
    
    def show_page(self, index):
        self.stacked_widget.setCurrentIndex(index)
        
        # 更新按钮样式
        buttons = [self.input_btn, self.analysis_btn, self.config_btn, self.about_btn]
        for i, btn in enumerate(buttons):
            if i == index:
                btn.setStyleSheet(btn.styleSheet() + "border: 2px solid #2c3e50;")
            else:
                # 移除边框样式
                style = btn.styleSheet()
                style = style.replace("border: 2px solid #2c3e50;", "")
                btn.setStyleSheet(style)
        
        # 刷新页面数据
        if index == 0:  # 信息录入页
            self.input_page.refresh_courses()
            log_message("进入成绩录入页面", "info", self.log_text, self.log_checkbox.isChecked())
        elif index == 1:  # 成绩分析页
            self.analysis_page.refresh_courses()
            self.analysis_page.refresh_students()
            log_message("进入成绩分析页面", "info", self.log_text, self.log_checkbox.isChecked())
        elif index == 2:  # 系统配置页
            self.config_page.refresh_config()
            log_message("进入系统配置页面", "info", self.log_text, self.log_checkbox.isChecked())
        elif index == 3:  # 关于页
            log_message("进入关于页面", "info", self.log_text, self.log_checkbox.isChecked())


if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    # 设置应用样式
    app.setStyle("Fusion")
    app.setFont(QFont("Microsoft YaHei", 9))
    
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())